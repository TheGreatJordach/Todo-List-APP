name: Feature Branch CI Pipeline

on:
  push:
    branches:
      - feature/add-crud-operation # Update branch name

jobs:
  validate-env:
    name: Load and Validate Environment Variables
    runs-on: ubuntu-latest
    steps:
      - name: Check Dev environment variables
        run: |
          echo "DATASOURCE_HOST=${{ secrets.DATASOURCE_HOST }}"
          echo "DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}"
          echo "DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}"
          echo "DATASOURCE_DATABASE=${{ secrets.DATASOURCE_DATABASE }}"
          echo "APP_CACHE_TTL=${{ secrets.APP_CACHE_TTL }}"
          echo "APP_CACHE_MAX=${{ secrets.APP_CACHE_MAX }}"
          echo "APP_PORT=${{ secrets.APP_PORT }}"
          # Add more checks as needed
        env:
          DATASOURCE_HOST: ${{ secrets.DATASOURCE_HOST }}
          DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          DATASOURCE_DATABASE: ${{ secrets.DATASOURCE_DATABASE }}
          API_PREFIX: ${{ secrets.API_PREFIX }}
          # Add app variables
          APP_CACHE_TTL: ${{ secrets.APP_CACHE_TTL }}
          APP_CACHE_MAX: ${{ secrets.APP_CACHE_MAX }}
          APP_PORT: ${{ secrets.APP_PORT }}
          # Add Swagger Variables
          SWAGGER_LICENCE_URL: ${{ secrets.SWAGGER_LICENCE_URL }}
          SWAGGER_SERVER: ${{ secrets.SWAGGER_SERVER }}
          SWAGGER_TITLE: ${{ secrets.SWAGGER_TITLE }}
          SWAGGER_PATH: ${{ secrets.SWAGGER_PATH }}
          SWAGGER_DESCRIPTION: ${{ secrets.SWAGGER_DESCRIPTION }}
          SWAGGER_VERSION: ${{ secrets.SWAGGER_VERSION }}
          SWAGGER_LICENCE: ${{ secrets.SWAGGER_LICENCE }}
    ## Added
  build:
    name: Build & Test project
    runs-on: ubuntu-latest
    needs: validate-env
    if : success() # Ensure env variable as loaded

    steps:
      - name: Checkout code
        # Set up Node.js environment
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Cache node_modules
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies (if cache is not hit, it will install them)
      - name: Install dependencies
        run: yarn install
      # Run your build and tests
      - name: Run unit tests
        run: yarn run test

      - name: Run e2e tests
        run: yarn run test:e2e

  coverage:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: build
    if: success() # Ensure this job only runs if 'validate-all-env' is successful
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: yarn install
      - name: Run Jest tests with coverage
        run:  yarn run test:cov     # Alternative : yarn test:cov

      # Upload the coverage to CodeCov
      - name: Upload coverage to CodeCov
        if: ${{ !cancelled() }}
        # codecov/test-results-action@v1 | codecov/codecov-action@v4
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # files: ./coverage/lcov.info
          # flags: unittests
          # name: codecov-umbrella

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: coverage
    if: success() # Ensure the build is clean
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: yarn install
      - name: Run ESLint
        run: yarn lint         # fail_ci_if_error: true


  auto_merge:

    name: Create Pull Request from feature/add-crud-operation to Main # If All Pass
    runs-on: ubuntu-latest
    needs: [ lint, coverage, build ] # Ensure all jobs pass
    steps:
      - name: Checkout the feature/add-crud-operation branch  # Update branch name
        uses: actions/checkout@v4
        with:
          ref: feature/add-crud-operation                     # Update branch name

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Authenticate GitHub CLI

        run: |
          echo "${{ secrets.GH_PAT }}" | gh auth login --with-token

      - name: Create Pull Request
        run: |                             # Update branch name
          gh pr create --base main --head feature/add-crud-operation --title "Merge feature Branch into Main" --body "This pull request merges the changes from feature Branch into the main branch."
